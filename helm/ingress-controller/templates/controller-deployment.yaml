apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ngrok-ingress-controller
  name: ngrok-ingress-controller-manager
  namespace: {{ .Release.Namespace }}
  annotations:
    checksum/agent-config: {{ include (print $.Template.BasePath "/agent-config-cm.yaml") . | sha256sum }}
    checksum/controller-role: {{ include (print $.Template.BasePath "/role.yaml") . | sha256sum }}
    checksum/rbac: {{ include (print $.Template.BasePath "/controller-rbac.yaml") . | sha256sum }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 4 }}
{{- end }}
spec:
  replicas: {{.Values.replicaCount}}
  selector:
    matchLabels:
      app: ngrok-ingress-controller
  template:
    metadata:
      annotations:
        kubectl.kubernetes.io/default-container: manager
      labels:
        app: ngrok-ingress-controller
    spec:
      serviceAccountName: ngrok-ingress-controller-manager
      volumes:
      - name: scripts
        configMap:
          name: scripts
          defaultMode: 0755
      containers:
      - name: ngrok-ingress-controller
        image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - /manager
        args:
        - --health-probe-bind-address=:8081
        - --metrics-bind-address=127.0.0.1:8080
        - --leader-elect
        securityContext:
          allowPrivilegeEscalation: false
        env:
        - name: NGROK_API_KEY
          valueFrom:
            secretKeyRef:
              key: API_KEY
              name: {{ .Values.credentialsSecret.name }}
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 15
          periodSeconds: 20
        readinessProbe:
          httpGet:
            path: /readyz
            port: 8081
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      - name: ngrok-cli
        image: ngrok/ngrok:3
        command:
        - ./scripts/gen-agent-config.sh
        envFrom:
        - configMapRef:
            name: ngrok-ingress-controller-agent-cm
            optional: true
        env:
        - name: NGROK_AUTHTOKEN
          valueFrom:
            secretKeyRef:
              key: AUTHTOKEN
              name: {{ .Values.credentialsSecret.name }}
        volumeMounts:
          - name: scripts
            mountPath: /scripts
            readOnly: true
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: scripts
  namespace: {{ .Release.Namespace }}
data:
{{ (.Files.Glob "scripts/gen-agent-config.sh").AsConfig | indent 2 }}
